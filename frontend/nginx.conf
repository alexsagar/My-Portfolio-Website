# ========================================
# NGINX CONFIGURATION FOR SAGAR PORTFOLIO
# ========================================

# User and worker processes
user www-data;
worker_processes auto;
worker_cpu_affinity auto;
worker_rlimit_nofile 65535;

# Error log
error_log /var/log/nginx/error.log warn;
pid /run/nginx.pid;

# Events
events {
    worker_connections 1024;
    use epoll;
    multi_accept on;
    accept_mutex off;
}

# HTTP configuration
http {
    # Basic settings
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    
    # Logging
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';
    
    access_log /var/log/nginx/access.log main;
    
    # Performance settings
    sendfile on;
    tcp_nopush on;
    tcp_nodelay on;
    keepalive_timeout 65;
    keepalive_requests 100;
    client_max_body_size 10M;
    client_body_buffer_size 128k;
    client_header_buffer_size 1k;
    large_client_header_buffers 4 4k;
    
    # Gzip compression
    gzip on;
    gzip_vary on;
    gzip_min_length 1024;
    gzip_proxied any;
    gzip_comp_level 6;
    gzip_types
        text/plain
        text/css
        text/xml
        text/javascript
        application/javascript
        application/xml+rss
        application/json
        application/ld+json
        image/svg+xml
        font/woff
        font/woff2;
    
    # Brotli compression (if available)
    # brotli on;
    # brotli_comp_level 6;
    # brotli_types text/plain text/css text/xml text/javascript application/javascript application/xml+rss application/json;
    
    # Rate limiting
    limit_req_zone $binary_remote_addr zone=api:10m rate=10r/s;
    limit_req_zone $binary_remote_addr zone=login:10m rate=1r/s;
    
    # Security headers
    add_header X-Frame-Options "DENY" always;
    add_header X-Content-Type-Options "nosniff" always;
    add_header X-XSS-Protection "1; mode=block" always;
    add_header Referrer-Policy "strict-origin-when-cross-origin" always;
    add_header Permissions-Policy "camera=(), microphone=(), geolocation=(), payment=(), usb=(), magnetometer=(), gyroscope=(), accelerometer=()" always;
    add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
    add_header Content-Security-Policy "default-src 'self'; script-src 'self' 'unsafe-inline' 'unsafe-eval' https://api.emailjs.com; style-src 'self' 'unsafe-inline' https://fonts.googleapis.com; font-src 'self' https://fonts.gstatic.com; img-src 'self' data: https://res.cloudinary.com; media-src 'self' https://res.cloudinary.com; connect-src 'self' https://res.cloudinary.com https://api.emailjs.com; frame-src 'none'; object-src 'none'; base-uri 'self'; form-action 'self'; upgrade-insecure-requests; worker-src 'self'; child-src 'self';" always;
    
    # Remove server signature
    server_tokens off;
    
    # File cache
    open_file_cache max=1000 inactive=20s;
    open_file_cache_valid 30s;
    open_file_cache_min_uses 2;
    open_file_cache_errors on;
    
    # Upstream servers (if using load balancing)
    # upstream backend {
    #     server 127.0.0.1:3000;
    #     server 127.0.0.1:3001;
    # }
    
    # Main server block
    server {
        listen 80;
        listen [::]:80;
        server_name yourdomain.com www.yourdomain.com;
        
        # Redirect HTTP to HTTPS
        return 301 https://$server_name$request_uri;
    }
    
    server {
        listen 443 ssl http2;
        listen [::]:443 ssl http2;
        server_name yourdomain.com www.yourdomain.com;
        
        # SSL configuration
        ssl_certificate /etc/letsencrypt/live/yourdomain.com/fullchain.pem;
        ssl_certificate_key /etc/letsencrypt/live/yourdomain.com/privkey.pem;
        
        # SSL security settings
        ssl_protocols TLSv1.2 TLSv1.3;
        ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-RSA-AES128-SHA256:ECDHE-RSA-AES256-SHA384;
        ssl_prefer_server_ciphers off;
        ssl_session_cache shared:SSL:10m;
        ssl_session_timeout 10m;
        ssl_session_tickets off;
        
        # OCSP Stapling
        ssl_stapling on;
        ssl_stapling_verify on;
        ssl_trusted_certificate /etc/letsencrypt/live/yourdomain.com/chain.pem;
        resolver 8.8.8.8 8.8.4.4 valid=300s;
        resolver_timeout 5s;
        
        # Security headers for HTTPS
        add_header Strict-Transport-Security "max-age=31536000; includeSubDomains; preload" always;
        
        # Root directory
        root /var/www/yourdomain.com/public;
        index index.html index.htm;
        
        # Security rules
        location ~ /\. {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        location ~ ~$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Block access to sensitive files
        location ~* \.(htaccess|htpasswd|ini|log|sh|sql|conf|bak|backup|old|orig|copy|env)$ {
            deny all;
            access_log off;
            log_not_found off;
        }
        
        # Block bad bots
        if ($http_user_agent ~* (bot|crawler|spider|scraper)) {
            return 403;
        }
        
        # Rate limiting for API endpoints
        location /api/ {
            limit_req zone=api burst=20 nodelay;
            limit_req_status 429;
        }
        
        # Static assets with long cache
        location ~* \.(css|js|png|jpg|jpeg|gif|ico|svg|woff|woff2|ttf|eot|mp4|webm|ogg)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Vary Accept-Encoding;
            access_log off;
            
            # Try to serve compressed version
            try_files $uri $uri.gz =404;
        }
        
        # Fonts with CORS
        location ~* \.(woff|woff2|ttf|eot)$ {
            expires 1y;
            add_header Cache-Control "public, immutable";
            add_header Access-Control-Allow-Origin "*";
            add_header Vary Accept-Encoding;
        }
        
        # HTML files with shorter cache
        location ~* \.(html|htm)$ {
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
            add_header Vary Accept-Encoding;
        }
        
        # JSON and XML files
        location ~* \.(json|xml)$ {
            expires 5m;
            add_header Cache-Control "public, must-revalidate";
            add_header Vary Accept-Encoding;
        }
        
        # PDF files
        location ~* \.pdf$ {
            expires 1M;
            add_header Cache-Control "public, must-revalidate";
            add_header Content-Disposition "inline";
        }
        
        # Manifest and service worker
        location = /manifest.json {
            expires 1d;
            add_header Cache-Control "public, must-revalidate";
            add_header Content-Type "application/manifest+json";
        }
        
        location = /sw.js {
            expires 1d;
            add_header Cache-Control "public, must-revalidate";
            add_header Content-Type "application/javascript";
        }
        
        # Robots and sitemap
        location = /robots.txt {
            expires 1d;
            add_header Cache-Control "public, must-revalidate";
        }
        
        location = /sitemap.xml {
            expires 1d;
            add_header Cache-Control "public, must-revalidate";
            add_header Content-Type "application/xml";
        }
        
        # Main application - handle SPA routing
        location / {
            try_files $uri $uri/ /index.html;
            
            # Security headers for HTML
            add_header X-Frame-Options "DENY" always;
            add_header X-Content-Type-Options "nosniff" always;
            add_header X-XSS-Protection "1; mode=block" always;
            
            # Cache control for HTML
            expires 1h;
            add_header Cache-Control "public, must-revalidate";
        }
        
        # Error pages
        error_page 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 421 422 423 424 425 426 428 429 431 451 500 501 502 503 504 505 506 507 508 510 511 /error.html;
        
        location = /error.html {
            internal;
            expires 1d;
            add_header Cache-Control "public, must-revalidate";
        }
        
        # Health check endpoint
        location /health {
            access_log off;
            return 200 "healthy\n";
            add_header Content-Type text/plain;
        }
        
        # Security monitoring
        location /security.txt {
            alias /var/www/yourdomain.com/public/.well-known/security.txt;
            expires 1d;
            add_header Cache-Control "public, must-revalidate";
        }
        
        # Logging
        access_log /var/log/nginx/yourdomain.com.access.log main;
        error_log /var/log/nginx/yourdomain.com.error.log warn;
    }
    
    # HTTP/2 Server Push (optional)
    # location = /index.html {
    #     http2_push /assets/css/main.css;
    #     http2_push /assets/js/main.js;
    #     http2_push /assets/images/profile.jpg;
    # }
}
